# -*- coding: utf-8 -*-
"""utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rKXwmLIhoPs4XauXSnpOxVj2wq8ClYa_

Implements all utility functions for visualization and creating class objects for CAMS
"""

import matplotlib.pyplot as plt

def visualize(img,gradCAM,gradCAMPP,smoothgradCAMPP, alpha = 0.7):
    """
    Util function to visualize Saliency maps for a sample in one row

    Args: 

      img: Original image 
      gradCAM: Saliency map using Grad-CAM
      gradCAMPP: Saliency map using Grad-CAM++
      smoothgradCAMPP: Saliency map using Smooth Grad-CAM++
      alpha: Blending ratio

    Returns: 
      plt: figure object of images grid
    """

    fig, ax = plt.subplots(nrows=1,ncols=4)
    plt.subplot(141)
    plt.xticks([], [])
    plt.yticks([], [])      
    plt.imshow(img)
    plt.title("Org")
    
    plt.subplot(142)
    plt.xticks([], [])
    plt.yticks([], []) 
    plt.imshow(img)  
    plt.imshow(gradCAM,alpha=alpha,cmap="jet")
    plt.title("G-CAM")
    
    plt.subplot(143)
    plt.xticks([], [])
    plt.yticks([], [])    
    plt.imshow(img)  
    plt.imshow(gradCAMPP,alpha=alpha,cmap="jet")
    plt.title("G-CAM++")
    
    plt.subplot(144)
    plt.xticks([], [])
    plt.yticks([], [])    
    plt.imshow(img)  
    plt.imshow(smoothgradCAMPP,alpha=alpha,cmap="jet")
    plt.title("SMG-CAM++")

    return plt

def visualize_IG(img,IG,gradCAM,gradCAMPP,smoothgradCAMPP, th, text="Int", 
                 alpha = 0.7, cmap = "seismic"):
    """
    Utility function to visualize outputs of Combinations with CAMs which will
    be overlaid on the original image

    Args: 

      img: Original image 
      IG: Explanation Map of technique to be combined with
      gradCAM: Saliency map using Grad-CAM
      gradCAMPP: Saliency map using Grad-CAM++
      smoothgradCAMPP: Saliency map using Smooth Grad-CAM++
      th: threshold of intensities for plotting Integrated grads
      text: Prefix to the CAM method to be added as title for combination
      alpha: Blending ratio
      cmap: Specific colormap to be used

    Returns: 
      plt: figure object of images grid  
    """

    fig, ax = plt.subplots(nrows=1,ncols=4)
    plt.xticks([], [])
    plt.yticks([], [])
    plt.subplot(151)
    plt.imshow(img)
    plt.title("Org")
    
    plt.subplot(152)
    plt.xticks([], [])
    plt.yticks([], [])   
    plt.imshow(img)
    plt.imshow(IG,alpha=alpha,cmap=cmap,vmin=-1*th, vmax=th)
    plt.title(text+" Grad")
    
    plt.subplot(153)
    plt.xticks([], [])
    plt.yticks([], [])    
    plt.imshow(img)  
    plt.imshow(gradCAM,alpha=alpha,cmap=cmap,vmin=-1*th, vmax=th)
    plt.title(text+" GCAM")
    
    plt.subplot(154)
    plt.xticks([], [])
    plt.yticks([], [])
    plt.imshow(img)  
    plt.imshow(gradCAMPP,alpha=alpha,cmap=cmap,vmin=-1*th, vmax=th)
    plt.title(text+" GCAM++")
    
    plt.subplot(155)
    plt.xticks([], [])
    plt.yticks([], [])
    plt.imshow(img)  
    plt.imshow(smoothgradCAMPP,alpha=alpha,cmap=cmap,vmin=-1*th, vmax=th)
    plt.title(text+" SMG++")

    return plt

def visualize_IG_Image(img,IG,gradCAM,gradCAMPP,smoothgradCAMPP, th, text = "Int", 
                       alpha = 0.7, cmap = "prism",vmin=0,vmax=255):
    """
    Utility function to visualize outputs of Combinations with CAMs without
    overlaying on the original image

    Args: 

      img: Original image 
      IG: Explanation Map of technique to be combined with
      gradCAM: Saliency map using Grad-CAM
      gradCAMPP: Saliency map using Grad-CAM++
      smoothgradCAMPP: Saliency map using Smooth Grad-CAM++
      th: threshold of intensities for plotting Integrated grads
      text: Prefix to the CAM method to be added as title for combination
      alpha: Blending ratio
      cmap: Specific colormap to be used

    Returns: 
      plt: figure object of images grid  
    """

    fig, ax = plt.subplots(nrows=1,ncols=4)
    plt.subplot(151)
    plt.imshow(img)
    plt.xticks([], [])
    plt.yticks([], [])
    plt.title("Org")
    
    plt.subplot(152)
    plt.xticks([], [])
    plt.yticks([], [])  
    plt.imshow(IG)
    plt.imshow(IG,cmap=cmap)
    plt.title(text+" Grad")
    
    plt.subplot(153)
    plt.xticks([], [])
    plt.yticks([], [])    
    plt.imshow(IG)  
    plt.imshow(gradCAM,cmap=cmap, alpha = alpha)
    plt.title(text+" GCAM")
    
    plt.subplot(154)
    plt.xticks([], [])
    plt.yticks([], [])    
    plt.imshow(IG)  
    plt.imshow(gradCAMPP,cmap=cmap, alpha = alpha)
    plt.title(text+" GCAM++")
    
    plt.subplot(155)
    plt.xticks([], [])
    plt.yticks([], [])
    plt.imshow(IG)  
    plt.imshow(smoothgradCAMPP,cmap=cmap,alpha = alpha)
    plt.title(text+" SMG++")

    return plt

def visualize_PBM_Image(img,IG,gradCAM,gradCAMPP,smoothgradCAMPP, th, text = "Int", 
                        alpha = 0.7, cmap1 = "None",cmap2 = "prism",vmin=0,vmax=255):
    """
    Utility function to visualize outputs of Combinations with CAMs without
    overlaying on the original image with two different cmaps

    Args: 

      img: Original image 
      IG: Explanation Map of technique to be combined with
      gradCAM: Saliency map using Grad-CAM
      gradCAMPP: Saliency map using Grad-CAM++
      smoothgradCAMPP: Saliency map using Smooth Grad-CAM++
      th: threshold of intensities for plotting Integrated grads
      text: Prefix to the CAM method to be added as title for combination
      alpha: Blending ratio
      cmap1, cmap2: Specific colormaps to be used

    Returns: 
      plt: figure object of images grid  
    """
    
    fig, ax = plt.subplots(nrows=1,ncols=4)
    plt.subplot(151)
    plt.imshow(img)
    plt.xticks([], [])
    plt.yticks([], []) 
    plt.title("Org")
    
    plt.subplot(152)
    plt.xticks([], [])
    plt.yticks([], [])  
    plt.imshow(IG)
    plt.imshow(IG,cmap=cmap1)
    plt.title(text)
    
    plt.subplot(153)
    plt.xticks([], [])
    plt.yticks([], [])    
    plt.imshow(IG)  
    plt.imshow(gradCAM,cmap=cmap2, alpha = alpha)
    plt.title(text+"-GCAM")
    
    plt.subplot(154)
    plt.xticks([], [])
    plt.yticks([], [])    
    plt.imshow(IG)  
    plt.imshow(gradCAMPP,cmap=cmap2, alpha = alpha)
    plt.title(text+"-GCAM++")
    
    plt.subplot(155)
    plt.xticks([], [])
    plt.yticks([], [])
    plt.imshow(IG)  
    plt.imshow(smoothgradCAMPP,cmap=cmap2,alpha = alpha)
    plt.title(text+"-SMG++")

    return plt

def plot_grid(count,lists,titles):
  """
  Utility function to dynamically create specific number of subplots

  Args:
    count: number of subplots to be created
    lists: lists of images
    titles: lists of plot titles

  Returns:
    plt: figure object of the images grid

  """

  for i,image,name in zip(range(1,count+1),lists,titles):

    plt.subplot(1,count,i)
    plt.imshow(image)
    plt.xticks([], [])
    plt.yticks([], [])
    plt.title(name)
  return plt

def cam(classname,model,target_layer,prediction,image,n_samples=25, stdev_spread=0.15):
    """
    Utility function to dynamically create objects for CAM classes

    Args:
        classname: name of CAM technique
        model: Classifier on which the CAM to be created
        target_layer: layer on which the visualization to be made
        prediciton: prediction made by the model on input image
        image: Original input image
        n_samples: number of samples for Smooth Grad-CAM++
        stdev_spread: std deviation for noise for Smooth Grad-CAM++

    Returns: 

        cam: Class Activation Mapping using the CAM 'classname' on Classifier 'model'   
    """
    class_object = classname(model,target_layer=target_layer, prediction = prediction)
    cam = class_object(image)
    
    return cam

