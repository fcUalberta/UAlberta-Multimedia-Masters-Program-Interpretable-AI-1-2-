# -*- coding: utf-8 -*-
"""models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BcW9jFM3kUjgvETqIjOPUVQR5juKXsdV

Creating Classifier models for visualization
"""

# Checking tensorflow version to make sure it is between 1.13 and 1.15
import tensorflow as tf
tf.logging.set_verbosity(tf.logging.ERROR)
print(tf.__version__)
import numpy as np
import os

# Defining base classifier model - VGG16

from keras.applications.vgg16 import VGG16
from keras.applications import vgg16
from keras.preprocessing import image

def base_model_VGG16(X,shape = (224,224,3)):
    """
    Creating a pretrained model for VGG16 on imagenet weights

    Args: 
        X : Input image of shape =>(1, 3, 224, 224)

    Returns: 

        model: Object of VGG16 model
        'block5_conv3': layer to be visualized
        prediction: predicted class
        decoded_y: details of predicted class (name, number, confidence score)
    """

    model = VGG16(include_top=True, weights='imagenet', input_shape=shape)

    X = vgg16.preprocess_input(X)
    y = model.predict(X, batch_size = 8)

    # Getting the names, number and confidence scores of predicted class
    decoded_y = vgg16.decode_predictions(y, top=5)[0]
    prediction = np.argmax(y)
    
    # Visualizing on layer 'block5_conv3'
    return model, 'block5_conv3',prediction, decoded_y

# Defining State-of-the-art Classifier - InceptionV3

from keras.applications import InceptionV3, imagenet_utils
from keras.applications import inception_v3
from keras.layers import Input
from skimage.transform import rescale

def new_model_InceptionV3(X,shape = (224,224,3)):
    """
    Creating a pretrained model for InceptionV3 on imagenet weights

    Args: 
        X : Input image of shape =>(1, 3, 224, 224)

    Returns: 

        model: Object of InceptionV3 model
        'mixed10': layer to be visualized
        prediction: predicted class
        decoded_y: details of predicted class (name, number, confidence score)

    """       
    input_tensor = Input(shape=(224, 224, 3)) 
    model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=True)

    X = inception_v3.preprocess_input(X)
    y = model.predict(X, batch_size = 16)

    # Getting the names, number and confidence scores of predicted class
    decoded_y = inception_v3.decode_predictions(y, top=5)[0]

    prediction = np.argmax(model.predict(X,batch_size = 16))
    #model.summary()

    # Visualizing on layer 'mixed10'    
    return model, 'mixed10',prediction, decoded_y

# Defining State-of-the-art Classifier - Xception

from keras.applications import Xception
from keras.applications import xception
from keras.layers import Input
from skimage.transform import rescale

def new_model_Xception(X,shape = (224,224,3)):
    """
    Creating a pretrained model for Xception on imagenet weights

    Args: 
        X : Input image of shape =>(1, 3, 224, 224)

    Returns: 

        model: Object of Xception model
        'block14_sepconv2_act': layer to be visualized
        prediction: predicted class
        decoded_y: details of predicted class (name, number, confidence score)

    """    
    input_tensor = Input(shape=(224, 224, 3))  # this assumes K.image_data_format() == 'channels_last'
    model = Xception(input_tensor=input_tensor, weights='imagenet', include_top=True)

    X = xception.preprocess_input(X)
    y = model.predict(X)

    # Getting the names, number and confidence scores of predicted class
    decoded_y = xception.decode_predictions(y, top=5)[0]
    prediction = np.argmax(model.predict(X,steps=16))
    #model.summary()

    # Visualizing on 'block14_sepconv2_act'
    return model, 'block14_sepconv2_act',prediction, decoded_y